#!/bin/bash

macports_version=2.8.1
macports_prefix=/opt/local/bin
macports_bin=$macports_prefix/port
homebrew_prefixes="/usr/local/bin:/opt/homebrew/bin"
jre_version=17
jre_brew_package=openjdk@$jre_version
jre_macports_package=openjdk$jre_version

log_error () {
  # This function takes a single argument, which is the message to log.
  # The logger command is used to log the message to the install facility 
  # at the error level.
  logger -t DatashareInstaller -p install.error "$1"
}

log_info () {
  # This function takes a single argument, which is the message to log.
  # The logger command is used to log the message to the install facility 
  # at the info level.
  logger -t DatashareInstaller -p install.info "$1"
}

is_xcode_installed () {
  # Note that this function only checks for the existence of the xcode-select command, 
  # which is a command-line utility included with Xcode. It does not actually verify 
  # that Xcode is properly installed and functioning.
  if ! [ -x "$(command -v xcode-select -p)" ] || ! [ -d "/Application/Xcode.app" ]; then
    return 1
  fi
  log_info 'Xcode is already installed.'
  return
}

is_xcode_cli_tools_installed () {
  # Note that this function checks for the existence of the gcc command, 
  # which is a compiler that is included with the Xcode Command Line Tools. 
  # If the gcc command is found, the function assumes that the Xcode Command Line Tools 
  # are installed. However, this may not always be the case, as the gcc command can be 
  # installed separately from the Xcode Command Line Tools, and the Xcode Command Line Tools 
  # may be installed without the gcc command.
  if ! [ -x "$(command -v xcode-select -p)" ] || ! [ -d "/Library/Developer/CommandLineTools" ]; then
    return 1
  fi
  log_info 'Xcode Command Line Tools are already installed.'
  return
}

is_homebrew_installed () {
  # Note that this function only checks for the existence of the brew command, 
  # which is the command-line interface for Homebrew. It does not actually verify
  # that Homebrew is properly installed and functioning.
  if ! [ -x "$(command -v brew)" ]; then
    return 1
  fi
  log_info 'Homebrew is already installed.'
  return
}

is_macports_installed () {
  # Note that this function only checks for the existence of the port command, 
  # which is the command-line interface for MacPorts. It does not actually verify
  # that MacPorts is properly installed and functioning.
  if ! [ -x "$(command -v $macports_bin)" ]; then
    return 1
  fi
  log_info 'MacPorts is already installed.'
  return
}

is_tesseract_installed () {
  # Note that this function only checks for the existence of the tesseract 
  # command and verifies that it is working correctly. It does not provide any 
  # information about the other components of Tesseract or whether they are 
  # installed and functioning properly. Additionally, this function does not check 
  # for the existence of any other tools or libraries that may be required for 
  # Tesseract to work correctly on MacOS.
  if ! [ -x "$(command -v tesseract)" ]; then
    return 1
  fi

  # Check if the 'tesseract' command works correctly
  tesseract --version
  if [ $? -ne 0 ]; then
    log_info 'Tesseract is installed but not working properly.'
    return 1
  fi

  log_info 'Tesseract is already installed and working.'
  return
}

is_jre_installed () {
  # This command returns JRE directory for the correct version if it exists
  /usr/libexec/java_home -F -v $jre_version
  if [ $? -ne 0  ]; then
    return 1
  fi

  log_info "OpenJDK $jre_version is already installed."
}

get_os_version () {
  sw_vers -productVersion
}

get_macports_package_url () {
  os_version=$(get_os_version)
  base_url="https://github.com/macports/macports-base/releases/download/v$macports_version/MacPorts-$macports_version"
  
  if [[ $os_version == 13.* ]]; then
    echo "$base_url-13-Ventura.pkg"
  elif [[ $os_version == 12.* ]]; then
    echo "$base_url-12-Monterey.pkg"
  elif [[ $os_version == 11.* ]]; then
    echo "$base_url-11-BigSur.pkg"
  elif [[ $os_version == 10.15.* ]]; then
    echo "$base_url-10.15-Catalina.pkg"
  else
    log_error "This version of Mac is not supported"
    exit 1
  fi
}

install_xcode_cli_tools () {
  log_info 'Installing Xcode Command Line Tools...'
  touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress
  software=$(softwareupdate -l | grep "\*.*Command Line Tools" | tail -n 1 | sed 's/^[^C]* //')
  softwareupdate -i "$software" --verbose
  if [ $? -ne 0 ]; then
    # The Xcode Command Line Tools installation failed
    log_error 'Failed to install the Xcode Command Line Tools.'
    exit 1
  fi
  # The Xcode Command Line Tools were installed successfully
  log_info 'Successfully installed the Xcode Command Line Tools.'
}

install_macports () {
  log_info 'Installing MacPorts...'
  macports_package_url=$(get_macports_package_url)
  macports_package_path=/tmp/MacPorts.pkg  
  sudo rm -f $macports_package_path
  # Download the MacPorts installation script
  curl -fsSL $macports_package_url -o $macports_package_path
  # Install the downloaded package
  sudo installer -pkg $macports_package_path -target /
  if [ $? -ne 0 ]; then
    log_info 'Failed to install MacPorts.'
    exit 1
  fi
  # Ensure MacPorts prefix is in PATH
  sudo sh -c "echo $macports_prefix > /etc/paths.d/macports"
  # Update the MacPorts package database
  sudo "$macports_bin" -v selfupdate
  # MacPorts was installed successfully
  log_info 'Successfully installed MacPorts.'
}

install_tesseract () {
  if is_homebrew_installed ; then
    install_tesseract_with_homebrew ; 
  elif is_macports_installed ; then
    install_tesseract_with_macports ; 
  else
    log_error 'Neither Homebrew or MacPorts can be used to install Tesseract.'
    exit 1
  fi
}

install_tesseract_with_homebrew () {
  log_info 'Installing Tesseract, imagemagick, and leptonica with Homebrew...'
  # Ensure Homebrew prefixes are in PATH
  PATH=$homebrew_prefixes:$PATH
  sudo -i -u "${USER}" brew install tesseract tesseract-lang imagemagick leptonica
  if [ $? -ne 0 ]; then
    # The installation failed
    log_error 'Failed to install Tesseract, imagemagick and leptonica with Homebrew.'
    exit 1
  fi

  # The installation was successful
  log_info 'Successfully installed Tesseract, imagemagick and leptonica with Homebrew.'
}

install_tesseract_with_macports () {
  log_info 'Installing Tesseract and leptonica with MacPorts...'
  sudo "$macports_bin" -N install tesseract tesseract-eng tesseract-spa tesseract-fra leptonica
  if [ $? -ne 0 ]; then
    # The installation failed
    log_error 'Failed to install Tesseract and leptonica with MacPorts.'
    exit 1
  fi
  log_info 'Installing imagemagick with MacPorts...'
  # We don't check the installation of imagemagick because 
  # Datashare can run without it.
  sudo "$macports_bin" -N install imagemagick
  # The installation was successful
  log_info 'Successfully installed Tesseract, imagemagick and leptonica with MacPorts.'
}

install_jre () {
  if is_homebrew_installed ; then
      install_jre_with_homebrew ;
    elif is_macports_installed ; then
      install_jre_with_macports ;
    else
      log_error "Neither Homebrew or MacPorts can be used to install OpenJDK $jre_version . You can try to install it manually"
      exit 1
    fi
}

install_jre_with_homebrew () {
  log_info "Installing OpenJDK $jre_version..."
  # Ensure Homebrew prefixes are in PATH
  PATH=$homebrew_prefixes:$PATH
  sudo -i -u "${USER}" brew install $jre_brew_package
  if [ $? -ne 0 ]; then
    # The installation failed
    log_error "Failed to install OpenJDK $jre_version with Brew. You can try to install it manually."
    exit 1
  fi
  # Add symlink as brew suggests
  ln -sfn /usr/local/opt/$jre_brew_package/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-$jre_version.jdk
  # The installation was successful
  log_info "Successfully installed OpenJDK $jre_version with Brew."
}

install_jre_with_macports () {
  log_info "Installing OpenJDK $jre_version..."
  sudo "$macports_bin" -N install $jre_macports_package
  if [ $? -ne 0 ]; then
    # The installation failed
    log_error "Failed to install OpenJDK $jre_version with MacPorts. You can try to install it manually"
    exit 1
  fi
  # The installation was successful
  log_info "Successfully installed OpenJDK $jre_version with MacPorts."
}

# Ensure MacPorts prefix is in PATH
PATH=$macports_prefix:$PATH
# Ensure Homebrew prefixes are in PATH
PATH=$homebrew_prefixes:$PATH

# Neither XCode or XCode Command Line Tools are installed
if ! is_xcode_cli_tools_installed && ! is_xcode_installed ; then install_xcode_cli_tools ; fi
# Neither Homebrew or MacPorts are not installed
if ! is_macports_installed && ! is_homebrew_installed ; then install_macports ; fi
# Tesseract is not installed
if ! is_tesseract_installed ; then install_tesseract ; fi
# Java JRE is not installed
if ! is_jre_installed ; then install_jre ; fi
